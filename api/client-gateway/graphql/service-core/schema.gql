"Async CMD server acknowledge"
type CommandAck {
   "message accepted by the server"
   accepted: Boolean
}

type ChatMessage {
   predefinedMessageId: Int
   textMessage: String
}

"Vehicle info"
type Vehicle {
   "License plate"
   plate: String
}

"Driver info"
type Driver {
   "Driver fullname"
   fullname: String
}

"Client info"
type Client {
   "Full name"
   fullname: String
   "Tip given to the client. Eg. satellites"
   tip: BigInt,
   "Tiping type"
   tipType: String
}

type VehiclePoint {
   "Vehicle ID"
   vehicleId: String!
   "Vehicle Geopoint"
   point: Point!
}

"Geo point"
type Point {
   "Latitude"
   lat: Float
   "Longitude"
   lng: Float
}

"Geo point"
input PointInput {
   "Latitude"
   lat: Float
   "Longitude"
   lng: Float
}

input ChatMessageInput {
   predefinedMessageId: Int
   textMessage: String
}

# "Vehicles Filter Input"
# input VehicleFilterInput {
#    "Vehicle air conditioning"
#    vehicleAirConditioning: Boolean
#    "Vehicle large trunk"
#    vehicleLargeTrunk: Boolean
#    "Vehicle VIP"
#    vehicleVip: Boolean
#    "Vehicle lugagge carrier"
#    vehicleLuggageCarrier: Boolean
#    "Driver language"
#    driverLanguage: String
# }

"Location info."
type Location {
   "Accurate location, Exact marker point: Lat,Lng"
   marker: Point
   "Non-Accurate location, describes an area"
   polygon: [Point]
   "City name"
   city: String
   "Zone name"
   zone: String
   "Neighborhood name"
   neighborhood: String
   "Street address 1"
   addressLine1: String
   "Street address 2"
   addressLine2: String
   "location notes"
   notes: String
}

"Service info"
type Service {
   "Service Identifier"
   _id: String
   "Service created timestamp."
   timestamp: BigInt
   client: Client
   "Service vehicle"
   vehicle: Vehicle
   "driver info"
   driver: Driver
   "Passenger pick up location"
   pickUp: Location
   "Passenger drop off location"
   dropOff: Location
   "dropOff especial type eg: AIRPORT, BUS_TERMINAL, OUT_OF_CITY"
   dropOffSpecialType: String
   "Service verification code"
   verificationCode: String
   "Requested features keys"
   requestedFeatures: [String]
   "Payment type key"
   paymentType: String
   "Applicable fare discount"
   fareDiscount: Float
   "pre calculated fare"
   fare: BigInt
   "Tip given to the driver"
   tip: BigInt
   "Exact route taken by the driver"
   route: [Point]   
   "current service state"
   state: String
   "Location point"
   location: Point   
   "Service last modification timestamp."
   lastModificationTimestamp: BigInt
   "Service pickup ETA"
   pickUpETA: BigInt
   "Closed state"
   closed: Boolean
   "Trip cost"
   tripCost: Int
   "Destination cost"
   destinationCost: Int
}

type ServiceMessage {
   "Username of the person that sent the message"
   from: String!
   "Username of the person that will receive the message"
   to: String!
   "Message data"
   message: ChatMessage!
}

"Client info."
input ClientInput {
    "Client ID"
    id: String
    "Full name"
    fullname: String
    "user name"
    username: String
    "Tip given to the client. Eg. satellites"
    tip: Int
    "Tiping type"
    tipType: String
    "Tip Client ID"
    tipClientId: String
    "drivers document, this is the one who referred this client"
    referrerDriverDocumentId: String
    "custom offer min distance in radious"
    offerMinDistance: Int
    "custom offer max distance in radious"
    offerMaxDistance: Int
}

"Location info"
input LocationInput {
    "Accurate location, Exact marker point: Lat,Lng"
    marker: PointInput
    "Non-Accurate location, describes an area"
    polygon: [PointInput]
    "City name"
    city: String
    "Zone name"
    zone: String
    "Neighborhood name"
    neighborhood: String
    "Street address 1"
    addressLine1: String
    "Street address 2"
    addressLine2: String
    "location notes"
    notes: String
}

type Query {   
   "Get client nearby vehicles"
   NearbyVehicles(clientLocation: PointInput!, filters: [String]): [VehiclePoint] 
   "Get current services requested by the client"
   CurrentServices: [Service] @requireAuth
   "Get the latest trips requested by the client"
   HistoricalClientServices(
      year: Int
      month: Int
      page: Int,
      count: Int
   ): [Service] @requireAuth 
}

type Mutation {
   "Request a new service"
   RequestAppService(
      # "client info"
      client: ClientInput
      "Passenger pick up location"
      pickUp: LocationInput!
      "Payment type key"
      paymentType: String!
      "Requested features keys"
      requestedFeatures: [String]
      "Passenger drop off location"
      dropOff: LocationInput
      "Tip given to the driver"
      tip: Int,
      "Trip cost"
      tripCost: Int
      destinationCost: Int

   ): CommandAck @requireAuth

      "Request a new service"
   RequestDeliveryService(
      # "client info"
      client: ClientInput
      "Passenger pick up location"
      pickUp: LocationInput!
      "Payment type key"
      paymentType: String!
      "Requested features keys"
      requestedFeatures: [String]
      "Passenger drop off location"
      dropOff: LocationInput
      "Tip given to the driver"
      tip: Int,
      "Trip cost"
      productCost: Int
      destinationCost: Int

   ): CommandAck @requireAuth


   "Partial payment service"
   PartialPaymentService(
      serviceId: String
      amount: Float
   ): CommandAck @requireAuth

   "Request a new service"
   RequestService(
      # "client info"
      client: ClientInput
      "Passenger pick up location"
      pickUp: LocationInput!
      "Payment type key"
      paymentType: String!
      "Requested features keys"
      requestedFeatures: [String]
      "Passenger drop off location"
      dropOff: LocationInput
      "Tip given to the driver"
      tip: Int,
      "Trip cost"
      tripCost: Int

   ): CommandAck @requireAuth

   "Cancel a requested service"
   CancelServiceByClient(
      "Service Identifier"
      id: String!
      "cancellation reason"
      reason: String!
      "cancellation additional notes"
      notes: String        
   ): CommandAck @requireAuth

    "Cancel a requested service"
   CancelAppServiceByClient(
      "Service Identifier"
      id: String!
      "cancellation reason"
      reason: String!
      "cancellation additional notes"
      notes: String        
   ): CommandAck @requireAuth

   "Change the service state"
   ChangeServiceState(
      "Service Identifier."
      id: String!
      "New service state"
      newState: String!
   ): CommandAck @requireAuth

   "Send a message to the driver"
   SendMessageToDriver(
      serviceId: String!
      message: ChatMessageInput!
   ): CommandAck @requireAuth
}

type Subscription {
  "This events is triggered when a Service is updated"
  ClientServiceUpdatedSubscription: Service
  "This events is triggered when a Service message is sent"
  ServiceMessageSubscription: ServiceMessage
}
