
version: 2.1
jobs:
  prepare:
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
        user: circleci
    steps:
      - checkout:
          path: ~/nebulae/repo
      - persist_to_workspace:
          root: ~/nebulae
          paths:
            - repo

# ################ FRONT END ################

  build-frontend:
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Register Micro-FrontEnd + Compose UI
          command: |            
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/            
            echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
            npm config set prefix '~/.npm-global'
            export PATH=~/.npm-global/bin:$PATH
            source ~/.profile
            npm install -g @nebulae/cli
            npm install -g @angular/cli
            nebulae register microfrontend --microservice-id=service --frontend-id=emi --setup-file=/home/circleci/nebulae/repo/etc/mfe-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json            
            nebulae compose-ui production --shell-finalEnvFile=$FILE_ENV_FRONTEND --shell-type=FUSE2_ANGULAR --shell-repo=https://github.com/nebulae-tpi/emi.git --frontend-id=emi --output-dir=/home/circleci/nebulae/frontend/emi/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json
            ls /home/circleci/nebulae/frontend/emi/           
      - run:
          name: Download SHELL Repository
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir -p ~/nebulae/frontend/shell 
            ( git clone --depth=1 https://github.com/nebulae-tpi/emi ~/nebulae/frontend/shell )      
      - run:
          name: commit & push package-lock.json changes
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            cp /home/circleci/nebulae/frontend/emi/package-lock.json ~/nebulae/frontend/shell/frontend/emi/package-lock.json                        
            ( cd ~/nebulae/frontend/shell && gitPublishPackageLockChanges "$GITHUB_USER_EMAIL" "$GITHUB_USER_NAME" "$GITHUB_PERSONAL_ACCESS_TOKEN" "nebulae-tpi/emi" "master" && cd ~/nebulae/repo/)
      - setup_remote_docker
      - run:
          name: Build docker image and push it to hub
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/            
            ls ~/nebulae/frontend/emi/dist/ 
            export DOCKERHUB_IMAGE=emi
            export FRONTEND_SHELL_PATH=~/nebulae/frontend/emi
            ( cd ~/nebulae/frontend/shell && sh deployment/docker/build-docker-hub.sh && cd ~/nebulae/repo/ )
            echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - frontend
            
# ################ API ################

  build-api-emi:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:10.15.1
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Installing NebulaE cli & Compose API
          command: |    
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/            
            echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
            npm config set prefix '~/.npm-global'
            export PATH=~/.npm-global/bin:$PATH
            source ~/.profile
            npm install -g @nebulae/cli
            nebulae register microapi --microservice-id=service --api-id=emi-gateway --setup-file=/home/circleci/nebulae/repo/etc/mapi-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json            
            nebulae compose-api production --api-type=NEBULAE_GATEWAY --api-repo=https://github.com/nebulae-tpi/emi-gateway.git --api-id=emi-gateway --output-dir=/home/circleci/nebulae/api/emi-gateway/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json      
            ls /home/circleci/nebulae/api/emi-gateway/
      - setup_remote_docker
      - run:
          name: Build docker image and push it to hub
          command: | 
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir -p ~/nebulae/api
            ( cd  ~/nebulae/api/ && git clone --depth=1 https://github.com/nebulae-tpi/emi-gateway  ~/nebulae/api/shell )      
            ls ~/nebulae/api/shell
            export DOCKERHUB_IMAGE=emigateway
            export API_SHELL_PATH=/home/circleci/nebulae/api/
            ( cd ~/nebulae/api/shell && sh ~/nebulae/api/shell/deployment/docker/build-docker-hub.sh  && cd ~/nebulae/repo/ )
            echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > ~/nebulae/api/EMI_DOCKERHUB_GENERATED_IMAGE_DIGEST
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - api  


  build-api-driver:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:10.15.1
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Installing NebulaE cli & Compose API
          command: |    
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/            
            echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
            npm config set prefix '~/.npm-global'
            export PATH=~/.npm-global/bin:$PATH
            source ~/.profile
            npm install -g @nebulae/cli
            nebulae register microapi --microservice-id=service --api-id=driver-gateway --setup-file=/home/circleci/nebulae/repo/etc/mapi-driver-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json            
            nebulae compose-api production --api-type=NEBULAE_GATEWAY --api-repo=https://github.com/nebulae-tpi/driver-gateway.git --api-id=driver-gateway --output-dir=/home/circleci/nebulae/api/driver-gateway/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json      
            ls /home/circleci/nebulae/api/driver-gateway/
      - setup_remote_docker
      - run:
          name: Build docker image and push it to hub
          command: | 
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir -p ~/nebulae/api-driver
            ( cd  ~/nebulae/api-driver/ && git clone --depth=1 https://github.com/nebulae-tpi/driver-gateway  ~/nebulae/api-driver/shell )      
            ls ~/nebulae/api-driver/shell
            export DOCKERHUB_IMAGE=drivergateway
            export API_SHELL_PATH=/home/circleci/nebulae/api/
            ( cd ~/nebulae/api-driver/shell && sh ~/nebulae/api-driver/shell/deployment/docker/build-docker-hub.sh  && cd ~/nebulae/repo/ )
            echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > ~/nebulae/api-driver/DRIVER_DOCKERHUB_GENERATED_IMAGE_DIGEST
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - api-driver




# ################ MBINIT ################ 
            
  build-mbinit:    
    working_directory: ~/nebulae/
    docker:
      - image: golang:1.9-alpine
        command: sh
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Build mbinit
          command: |
            mkdir ~/nebulae/go
            apk add --no-cache git
            go get github.com/dumacp/mbinit
            go install github.com/dumacp/mbinit
            cp /go/bin/mbinit ~/nebulae/go/
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - go


# ################ BACK END ################ 
            
  build-backend-service:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - setup_remote_docker      
      - run:
          name: Build docker image for backend <service>
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir ~/nebulae/backend
            cp ~/nebulae/go/mbinit ~/nebulae/repo/backend/service/
            export DOCKERHUB_IMAGE=service.backend.service
            export DOCKERHUB_TAG=0.2.12
            docker build  -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest ~/nebulae/repo/backend/service/
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest      
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - backend

  build-backend-service-core:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:10.15.1
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - setup_remote_docker      
      - run:
          name: Build docker image for backend <service-core>
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir ~/nebulae/backend
            cp ~/nebulae/go/mbinit ~/nebulae/repo/backend/service-core/
            export DOCKERHUB_IMAGE=service.backend.servicecore
            export DOCKERHUB_TAG=2.4.8  # SERVICE-CORE # SERVICE-CORE # SERVICE-CORE # SERVICE-CORE # SERVICE-CORE # SERVICE-CORE # SERVICE-CORE 
            docker build  -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest ~/nebulae/repo/backend/service-core/
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest      
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - backend


  build-backend-driver-app-link:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:10.15.1
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - setup_remote_docker      
      - run:
          name: Build docker image for backend <driver-app-link>
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir ~/nebulae/backend
            cp ~/nebulae/go/mbinit ~/nebulae/repo/backend/driver-app-link/
            export DOCKERHUB_IMAGE=service.backend.driverapplink
            export DOCKERHUB_TAG=2.4.8  # DRIVER-LINK # DRIVER-LINK # DRIVER-LINK # DRIVER-LINK # DRIVER-LINK # DRIVER-LINK # DRIVER-LINK # DRIVER
            docker build  -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest ~/nebulae/repo/backend/driver-app-link/
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG
            docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest      
      - persist_to_workspace:
          root: ~/nebulae/
          paths: 
            - backend

# ################ DEPLOYMENT ################ 

  deploy-dev:
      working_directory: ~/nebulae/
      docker:
        - image: google/cloud-sdk:latest
      steps:
        - attach_workspace:
            at: ~/nebulae
        - run:
            name: Setup gcloud & kubectl
            command: |
              ls -a ~/nebulae
              echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
              gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
              gcloud --quiet config set project $GKE_PROJECT_DEV
              gcloud --quiet config set compute/zone $GKE_ZONE_DEV
              gcloud --quiet container clusters get-credentials $GKE_CLUSTER
        - run:
            name: Deploy emi FrontEnd
            command: |
              (ls ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST && echo docker image DIGEST to set $(< ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo frontend not found
              (ls ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST && kubectl set image deployment/frontend-emi frontend-emi=$(< ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo frontend not found
        - run:
            name: Deploy emi-gateway API
            command: |
              (ls ~/nebulae/api/EMI_DOCKERHUB_GENERATED_IMAGE_DIGEST && echo docker image DIGEST to set $(< ~/nebulae/api/EMI_DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
              (ls ~/nebulae/api/EMI_DOCKERHUB_GENERATED_IMAGE_DIGEST && kubectl set image deployment/api-emi-gateway api-emi-gateway=$(< ~/nebulae/api/EMI_DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
        - run:
            name: Deploy driver-gateway API
            command: |
              (ls ~/nebulae/api-driver/DRIVER_DOCKERHUB_GENERATED_IMAGE_DIGEST && echo docker image DIGEST to set $(< ~/nebulae/api-driver/DRIVER_DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
              (ls ~/nebulae/api-driver/DRIVER_DOCKERHUB_GENERATED_IMAGE_DIGEST && kubectl set image deployment/api-driver-gateway api-driver-gateway=$(< ~/nebulae/api-driver/DRIVER_DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
        - run:
            name: Deploy Service replicaset persistence 
            command: |
              kubectl apply -f ~/nebulae/repo/deployment/gke/gcloud-ssd-service.yaml
              kubectl apply -f ~/nebulae/repo/deployment/gke/deployment-service-mongo.yaml
              for xi in $(seq 0 30); do kubectl get pod | grep dbserv-0 | grep Running && break; sleep 5; done
              kubectl exec dbserv-0 -- mongo --host dbserv-0.dbserv --port 27017  --eval "rs.conf()" || \
              kubectl exec dbserv-0 -- mongo --host dbserv-0.dbserv --port 27017  --eval  "rs.initiate({ _id : \"rs0\", members: [{ _id: 0, host: \"dbserv-0.dbserv:27017\" },{ _id: 1, host: \"dbserv-1.dbserv:27017\" },{ _id: 2, host: \"dbserv-2.dbserv:27017\" }]})"
        - run:
            name: Deploy BackEnds 
            command: |
              for xi in $(ls ~/nebulae/repo/deployment/gke/*.y*ml); do sed -i s/DOCKERHUB/$DOCKERHUB_NAMESPACE/ $xi ; done
              kubectl apply -f ~/nebulae/repo/deployment/gke/



workflows: 
  version: 2.1
  build-and-deploy:
    jobs:
      - prepare:
          context: TPI
      - build-mbinit:
          context: TPI
          requires:
            - prepare
      - build-frontend:
          context: TPI
          requires:
            - prepare
          filters:
            branches:
              only:
                - develop
      - build-api-emi:
          context: TPI
          requires:
            - prepare
          filters:
            branches:
              only:
                - develop
      - build-api-driver:
          context: TPI
          requires:
            - prepare
          filters:
            branches:
              only:
                - develop
      - build-backend-service:
          context: TPI
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - develop
      - build-backend-service-core:
          context: TPI
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - develop
      - build-backend-driver-app-link:
          context: TPI
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - develop
      - deploy-dev:
          context: TPI
          requires:
            - build-frontend
            - build-api-driver            
            - build-api-emi            
            - build-backend-driver-app-link
            - build-backend-service
            - build-backend-service-core
          filters:
            branches:
              only:
                - develop
      - build-frontend:
          context: TPI_PROD
          name: build-frontend-prod
          requires:
            - prepare
          filters:
            branches:
              only:
                - master
      - build-api-emi:
          context: TPI_PROD
          name: build-api-emi-prod
          requires:
            - prepare
          filters:
            branches:
              only:
                - master
      - build-api-driver:
          context: TPI_PROD
          name: build-api-driver-prod
          requires:
            - prepare
          filters:
            branches:
              only:
                - master
      - build-backend-service:
          context: TPI_PROD
          name: build-backend-service-prod
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - master
      - build-backend-service-core:
          context: TPI_PROD
          name: build-backend-service-core-prod
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - master
      - build-backend-driver-app-link:
          context: TPI_PROD
          name: build-backend-driver-app-link-prod
          requires:
            - prepare
            - build-mbinit      
          filters:
            branches:
              only:
                - master
      - deploy-dev:
          context: TPI_PROD
          name: deploy-dev-prod
          requires:
            - build-frontend-prod
            - build-api-driver-prod          
            - build-api-emi-prod            
            - build-backend-driver-app-link-prod
            - build-backend-service-prod
            - build-backend-service-core-prod
          filters:
            branches:
              only:
                - master
